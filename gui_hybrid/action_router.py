from gui_hybrid.vision import Vision
from gui_hybrid.llm_planner import LLMPlanner
from gui_hybrid.executor import Executor

class ActionRouter:
    """
    Orchestrates the flow: user intent -> direct Python -> vision/LLM -> execution.
    """
    def __init__(self):
        self.vision = Vision()
        self.planner = LLMPlanner()
        self.executor = Executor()

    def run_action(self, user_intent):
        """
        Main entry: try direct Python action, else use AI/vision fallback.
        """
        # 1. Try direct Python action (e.g., "click at 100,200" or "type hello")
        if self.try_direct_action(user_intent):
            print("[Router] Direct Python action succeeded.")
            return
        print("[Router] Direct action not possible, using AI/vision fallback...")
        # 2. Use vision/LLM to plan and execute
        image = self.vision.capture_screen()
        buttons = self.vision.detect_buttons(image)
        ocr_text = self.vision.ocr_text(image)
        screen_context = {'ocr_text': ocr_text, 'buttons': buttons}
        plan = self.planner.plan_action(user_intent, screen_context)
        if plan.get('action') == 'click' and 'coords' in plan:
            x, y = plan['coords']
            self.executor.move_and_click(x, y)
            print(f"[Router] AI/vision click at ({x}, {y}) executed.")
        elif plan.get('action') == 'type' and 'text' in plan:
            self.executor.type_text(plan['text'])
            print(f"[Router] AI/vision typed: {plan['text']}")
        else:
            print("[Router] No actionable plan generated by AI/vision.")

    def try_direct_action(self, user_intent):
        """
        Try to parse and execute direct Python actions (e.g., click at x,y or type text).
        Returns True if action was performed, else False.
        """
        import re
        # Example: "click at 100,200"
        m = re.match(r"click at (\d+),(\d+)", user_intent.lower())
        if m:
            x, y = int(m.group(1)), int(m.group(2))
            self.executor.move_and_click(x, y)
            return True
        # Example: "type hello world"
        m = re.match(r"type (.+)", user_intent.lower())
        if m:
            self.executor.type_text(m.group(1))
            return True
        return False 