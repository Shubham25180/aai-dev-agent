# NEXUS AI Dev Agent - Workflow (Python-Native GUI Edition)

## 1. Install Dependencies

- Install all requirements (including PyQt6 or NiceGUI, pyautogui, TTS/STT, LLM, etc.):
  ```bash
  pip install -r requirements.txt
  ```

## 2. Launch the Agent

- Run the main GUI app (choose one):
  ```bash
  python run_gui.py                    # Recommended: PyQt6 desktop app with error checking
  # or
  python gui/nexus_gui_simple.py       # Simplified PyQt6 desktop app (no complex dependencies)
  # or
  python gui/nexus_gui.py              # Full PyQt6 desktop app (with all features)
  # or
  python main_nicegui.py               # NiceGUI browser app
  ```

- The app will launch with a modern chat, toggles, and voice controls—all in one process.

## 3. Using the Agent

- Type or speak your instructions in the chat window.
- The agent will process your input using LLM, memory, and automation modules.
- All actions, plans, and voice commands are logged and can be undone/redone.
- GUI automation (click, type, screenshot, etc.) is available via ActionRouter and Executor.
- Vision (OCR, YOLO) is available for screen context and UI analysis.

## 4. No More Frontend/Backend Split

- All logic is in-process Python—no REST, WebSocket, or CORS needed.
- LLM, voice, memory, and GUI are tightly integrated for maximum speed and simplicity.
- Solo developer workflow: edit, run, and test everything in one place.

## 5. Advanced Features

- Always-on voice (Whisper, VAD, denoise, normalization).
- TTS (edge-tts, pyttsx3) for spoken responses.
- Undo/redo, memory timeline, and session logging.
- Reflex mode: auto-retry failed tasks, learn from user patterns.
- Modular: add new features (intent detection, vision, etc.) as needed.

## 6. Troubleshooting

- If the GUI does not launch, check your Python and PyQt6/NiceGUI installation.
- For voice issues, check your OS audio config and TTS/STT dependencies.
- For LLM issues, ensure Ollama or your chosen model is running and available.

---

This workflow is optimized for solo developers: fast iteration, minimal friction, and maximum power—all in Python.
